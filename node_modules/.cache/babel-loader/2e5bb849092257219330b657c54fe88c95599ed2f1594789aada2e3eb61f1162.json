{"ast":null,"code":"import React,{useEffect,useState}from'react';import GratitudeDiary from'./components/GratitudeDiary';import EntryHistory from'./components/EntryHistory';import QuoteBox from'./components/QuoteBox';// A small collection of motivational quotes. Each quote can include an author.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QUOTES=[{text:'Ogni giorno porta nuovi inizi, nuova speranza e nuove opportunità.',author:'Anonimo'},{text:'La gratitudine trasforma ciò che abbiamo in abbastanza.',author:'Aesop'},{text:'Ricorda che la felicità è un modo di viaggiare, non una destinazione.',author:'Roy L. Goodman'},{text:'Apprezza le piccole cose, perché un giorno potresti guardare indietro e scoprire che erano grandi.',author:'Robert Brault'},{text:'Ogni momento è un nuovo inizio.',author:'T.S. Eliot'}];/**\n * Main application component\n *\n * Handles onboarding (asking for the user's name and date), renders the\n * GratitudeDiary component, maintains the list of past entries and displays\n * an EntryHistory with filtering and PDF export capabilities.\n */export default function App(){const[name,setName]=useState('');const[date,setDate]=useState('');const[entries,setEntries]=useState([]);const[filterYear,setFilterYear]=useState('');const[filterMonth,setFilterMonth]=useState('');const[quote,setQuote]=useState(null);// Local state for input fields\nconst[nameInput,setNameInput]=useState('');const[dateInput,setDateInput]=useState(new Date().toISOString().split('T')[0]);// Load persisted data on mount\nuseEffect(()=>{const storedName=localStorage.getItem('gratitude-name');if(storedName)setName(storedName);const storedEntries=localStorage.getItem('gratitude-entries');if(storedEntries)setEntries(JSON.parse(storedEntries));},[]);// Choose a random quote based on date to ensure a different one each day\nuseEffect(()=>{if(!quote){const index=new Date().getDate()%QUOTES.length;setQuote(QUOTES[index]);}},[quote]);// Persist name and entries to localStorage when they change\nuseEffect(()=>{if(name){localStorage.setItem('gratitude-name',name);}},[name]);useEffect(()=>{if(entries){localStorage.setItem('gratitude-entries',JSON.stringify(entries));}},[entries]);// Handler when a new diary entry is completed\nconst handleComplete=entry=>{setEntries([...entries,entry]);};// Filter entries by year and month\nconst filteredEntries=entries.filter(entry=>{if(filterYear&&entry.date.split('-')[0]!==filterYear)return false;if(filterMonth&&entry.date.split('-')[1]!==filterMonth)return false;return true;}).sort((a,b)=>a.date<b.date?1:-1);// Determine which view to show based on whether name and date are set\nif(!name){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center p-6 bg-primary-light\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-md w-full bg-white rounded-3xl shadow-xl p-8 text-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-gray-800 mb-4\",children:\"Benvenuto!\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Per iniziare, inserisci il tuo nome:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Il tuo nome\",value:nameInput,onChange:e=>setNameInput(e.target.value),className:\"w-full mb-4 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-dark\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{if(nameInput.trim())setName(nameInput.trim());},className:\"w-full py-3 bg-primary-dark text-white rounded-md font-semibold hover:bg-primary\",children:\"Continua\"})]})});}if(!date){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center p-6 bg-primary-light\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-md w-full bg-white rounded-3xl shadow-xl p-8 text-center\",children:[/*#__PURE__*/_jsxs(\"h2\",{className:\"text-2xl font-bold text-gray-800 mb-4\",children:[\"Ciao \",name,\"!\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Seleziona la data per il tuo diario:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:dateInput,onChange:e=>setDateInput(e.target.value),className:\"w-full mb-4 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-dark\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{if(dateInput)setDate(dateInput);},className:\"w-full py-3 bg-primary-dark text-white rounded-md font-semibold hover:bg-primary\",children:\"Inizia\"})]})});}return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-primary-light\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-4xl mx-auto p-6\",children:[quote&&/*#__PURE__*/_jsx(QuoteBox,{quote:quote.text,author:quote.author}),/*#__PURE__*/_jsx(GratitudeDiary,{name:name,date:date,onComplete:handleComplete}),entries.length>0&&/*#__PURE__*/_jsx(EntryHistory,{entries:filteredEntries,onFilterChange:(year,month)=>{// update filters. If year is null, update only month; vice versa.\nif(year!==null)setFilterYear(year);if(month!==null)setFilterMonth(month);}})]})});}","map":{"version":3,"names":["React","useEffect","useState","GratitudeDiary","EntryHistory","QuoteBox","jsx","_jsx","jsxs","_jsxs","QUOTES","text","author","App","name","setName","date","setDate","entries","setEntries","filterYear","setFilterYear","filterMonth","setFilterMonth","quote","setQuote","nameInput","setNameInput","dateInput","setDateInput","Date","toISOString","split","storedName","localStorage","getItem","storedEntries","JSON","parse","index","getDate","length","setItem","stringify","handleComplete","entry","filteredEntries","filter","sort","a","b","className","children","type","placeholder","value","onChange","e","target","onClick","trim","onComplete","onFilterChange","year","month"],"sources":["/Users/leo/Desktop/gratitude-diary/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport GratitudeDiary from './components/GratitudeDiary';\nimport EntryHistory from './components/EntryHistory';\nimport QuoteBox from './components/QuoteBox';\n\n// A small collection of motivational quotes. Each quote can include an author.\nconst QUOTES = [\n  { text: 'Ogni giorno porta nuovi inizi, nuova speranza e nuove opportunità.', author: 'Anonimo' },\n  { text: 'La gratitudine trasforma ciò che abbiamo in abbastanza.', author: 'Aesop' },\n  { text: 'Ricorda che la felicità è un modo di viaggiare, non una destinazione.', author: 'Roy L. Goodman' },\n  { text: 'Apprezza le piccole cose, perché un giorno potresti guardare indietro e scoprire che erano grandi.', author: 'Robert Brault' },\n  { text: 'Ogni momento è un nuovo inizio.', author: 'T.S. Eliot' },\n];\n\n/**\n * Main application component\n *\n * Handles onboarding (asking for the user's name and date), renders the\n * GratitudeDiary component, maintains the list of past entries and displays\n * an EntryHistory with filtering and PDF export capabilities.\n */\nexport default function App() {\n  const [name, setName] = useState('');\n  const [date, setDate] = useState('');\n  const [entries, setEntries] = useState([]);\n  const [filterYear, setFilterYear] = useState('');\n  const [filterMonth, setFilterMonth] = useState('');\n  const [quote, setQuote] = useState(null);\n\n  // Local state for input fields\n  const [nameInput, setNameInput] = useState('');\n  const [dateInput, setDateInput] = useState(new Date().toISOString().split('T')[0]);\n\n  // Load persisted data on mount\n  useEffect(() => {\n    const storedName = localStorage.getItem('gratitude-name');\n    if (storedName) setName(storedName);\n    const storedEntries = localStorage.getItem('gratitude-entries');\n    if (storedEntries) setEntries(JSON.parse(storedEntries));\n  }, []);\n\n  // Choose a random quote based on date to ensure a different one each day\n  useEffect(() => {\n    if (!quote) {\n      const index = new Date().getDate() % QUOTES.length;\n      setQuote(QUOTES[index]);\n    }\n  }, [quote]);\n\n  // Persist name and entries to localStorage when they change\n  useEffect(() => {\n    if (name) {\n      localStorage.setItem('gratitude-name', name);\n    }\n  }, [name]);\n  useEffect(() => {\n    if (entries) {\n      localStorage.setItem('gratitude-entries', JSON.stringify(entries));\n    }\n  }, [entries]);\n\n  // Handler when a new diary entry is completed\n  const handleComplete = (entry) => {\n    setEntries([...entries, entry]);\n  };\n\n  // Filter entries by year and month\n  const filteredEntries = entries\n    .filter((entry) => {\n      if (filterYear && entry.date.split('-')[0] !== filterYear) return false;\n      if (filterMonth && entry.date.split('-')[1] !== filterMonth) return false;\n      return true;\n    })\n    .sort((a, b) => (a.date < b.date ? 1 : -1));\n\n  // Determine which view to show based on whether name and date are set\n  if (!name) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-6 bg-primary-light\">\n        <div className=\"max-w-md w-full bg-white rounded-3xl shadow-xl p-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">Benvenuto!</h1>\n          <p className=\"text-gray-600 mb-4\">Per iniziare, inserisci il tuo nome:</p>\n          <input\n            type=\"text\"\n            placeholder=\"Il tuo nome\"\n            value={nameInput}\n            onChange={(e) => setNameInput(e.target.value)}\n            className=\"w-full mb-4 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-dark\"\n          />\n          <button\n            onClick={() => {\n              if (nameInput.trim()) setName(nameInput.trim());\n            }}\n            className=\"w-full py-3 bg-primary-dark text-white rounded-md font-semibold hover:bg-primary\"\n          >\n            Continua\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!date) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center p-6 bg-primary-light\">\n        <div className=\"max-w-md w-full bg-white rounded-3xl shadow-xl p-8 text-center\">\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Ciao {name}!</h2>\n          <p className=\"text-gray-600 mb-4\">Seleziona la data per il tuo diario:</p>\n          <input\n            type=\"date\"\n            value={dateInput}\n            onChange={(e) => setDateInput(e.target.value)}\n            className=\"w-full mb-4 p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary-dark\"\n          />\n          <button\n            onClick={() => {\n              if (dateInput) setDate(dateInput);\n            }}\n            className=\"w-full py-3 bg-primary-dark text-white rounded-md font-semibold hover:bg-primary\"\n          >\n            Inizia\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-primary-light\">\n      {/* Quote at top after selecting date */}\n      <div className=\"max-w-4xl mx-auto p-6\">\n        {quote && <QuoteBox quote={quote.text} author={quote.author} />}\n        {/* Gratitude diary for the selected date */}\n        <GratitudeDiary name={name} date={date} onComplete={handleComplete} />\n        {/* Show history of entries only if there are any */}\n        {entries.length > 0 && (\n          <EntryHistory\n            entries={filteredEntries}\n            onFilterChange={(year, month) => {\n              // update filters. If year is null, update only month; vice versa.\n              if (year !== null) setFilterYear(year);\n              if (month !== null) setFilterMonth(month);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}